pragma solidity ^0.4.8;


//Contract with only one (first) submission with file cheking
contract SolveFileFlagProblem {
    
    //global contract storage
    address public owner;           //deployer of the contract
    uint public fund;               //size of fund
    bool submissions_exist;         //any correct submissions in contract?
    bool file_test_passed;          //exploit checked sucsessfully
    bool flag_test_passed;          //corret flag finded
    string flag;                    //secret string
    
    //constructor:
    // store owner and flag
    function SolveFileFlagProblem(string _flag)
    {
        owner = msg.sender;
        flag = _flag;
        file_test_passed = false;
        flag_test_passed = false;
    }

    //sent money to contract
    function CreateFund(uint _fund) private
    {
        if (msg.sender == owner)
        {
            //submissions not exists
            // so, we can increse the fund
            if (!submissions_exist)
            {
                fund = fund + _fund;
            }
            //TODO: give difference between
            // sizes of funds to hacker who
            // already submitted
        }
    } 
    
    //destruct contract manually and send money back to
    // contract owner
    function kill()
    {
        if (msg.sender == owner)
        {
            selfdestruct(owner);
        }
    }
    

    //compare strings
    //TODO: change string logic to hashes logic
    function stringsEqual(string x, string y) private returns (bool)
    {
        return sha3(x) == sha3(y) ? true : false;
    }
    
    //
    function SubmitFlag(string x) payable returns (bool)
    {
        //hacker's address to pay in
        address hacker = msg.sender;

        if (!flag_test_passed && stringsEqual(x, flag))
        {
            flag_test_passed = true;

            if (file_test_passed)
            {
                if(!hacker.send(fund))
                {
                    throw;    
                }
                else
                {
                    //closing contract
                    selfdestruct(owner);
                }
            }
        }
        
    }

    //
    function SubmitExploit(string x) payable returns (bool)
    {
        //if user id admin (robot from testing server)
        //or huuuuman with extended permissions
        //TODO: chech status of user in wallet-contracts
        //if ( && !file_test_passed)
        {
            file_test_passed = true;
            if (flag_test_passed)
            {
                if(!hacker.send(fund))
                {
                    throw;    
                }
                else
                {
                    //closing contract
                    selfdestruct(owner);
                }
            }
        }
        else
        {
            return false;
        }
    }
    
}