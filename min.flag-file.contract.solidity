pragma solidity ^0.4.8;contract SolveFileFlagProblem {address public owner;address public admin;uint public divisor;uint public divident;bool submissions_exist;bool file_test_passed;bool flag_test_passed;uint fund;bytes32 flag;function SolveFileFlagProblem(string _flag){owner = msg.sender;flag = sha3(_flag);fund = 0;divident = 2;divisor = 3;file_test_passed = false;flag_test_passed = false;admin = 0x02b3674D222dDee4AeE5c457F67905B9fC51d082;}function kill(){if (msg.sender == owner && !flag_test_passed && !file_test_passed){selfdestruct(owner);}}function isFlagCorrect(string _flag) constant returns (bool){return sha3(_flag) == flag ? true : false;}function SubmitFlag(string x) payable returns (bool){address hacker = msg.sender;if (!flag_test_passed && isFlagCorrect(x)){flag_test_passed = true;if(!hacker.send((fund*divident)/divisor)){throw;}}if (this.balance == 0) { selfdestruct(owner); } } function VerifyExploit() payable returns (bool) { address hacker = msg.sender;  if (msg.sender == admin || msg.sender == owner) { file_test_passed = true;  if (flag_test_passed) {  if(!hacker.send(fund - (fund*divident)/divisor))  {  throw;  } } if (this.balance == 0) {  selfdestruct(owner); } } else { return false; } } function() payable { if (!flag_test_passed && !file_test_passed) { fund = fund + msg.value; } }}